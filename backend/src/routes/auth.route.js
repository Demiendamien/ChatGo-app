import express from "express";

const router = express.Router();

// Test si les imports fonctionnent
console.log("üîÑ Chargement des routes auth...");

try {
  // Import avec gestion d'erreur
  const authController = await import("../controllers/auth.controller.js");
  const authMiddleware = await import("../middleware/auth.middleware.js");
  
  console.log("‚úÖ Controllers import√©s:", Object.keys(authController));
  console.log("‚úÖ Middleware import√©:", Object.keys(authMiddleware));

  const {
    checkAuth,
    login,
    logout,
    signup,
    updateProfile,
  } = authController;
  
  const { protectRoute } = authMiddleware;

  // Routes avec logs
  router.post("/signup", (req, res, next) => {
    console.log("üìù Route /signup appel√©e");
    signup(req, res, next);
  });

  router.post("/login", (req, res, next) => {
    console.log("üîê Route /login appel√©e");
    login(req, res, next);
  });

  router.post("/logout", (req, res, next) => {
    console.log("üëã Route /logout appel√©e");
    logout(req, res, next);
  });

  router.put("/update-profile", protectRoute, (req, res, next) => {
    console.log("üë§ Route /update-profile appel√©e");
    updateProfile(req, res, next);
  });

  router.get("/check", protectRoute, (req, res, next) => {
    console.log("‚úîÔ∏è Route /check appel√©e");
    checkAuth(req, res, next);
  });

  console.log("‚úÖ Routes auth configur√©es avec succ√®s");

} catch (error) {
  console.error("‚ùå Erreur lors du chargement des routes auth:", error);
  
  // Routes de fallback pour debug
  router.get("/check", (req, res) => {
    res.status(500).json({ error: "Controller non charg√©", details: error.message });
  });
  
  router.post("/signup", (req, res) => {
    res.status(500).json({ error: "Controller non charg√©", details: error.message });
  });
}

export default router;